// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    lists         List[]
    tasks         Task[]
    Tag           Tag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum SortCriteria {
    position
    date
}

model List {
    id         String       @id @default(cuid())
    name       String
    user       User         @relation(fields: [userId], references: [id])
    userId     String
    position   Int
    sort_by    SortCriteria
    created_at DateTime     @default(now())
    updated_at DateTime     @default(now()) @updatedAt
    tasks      Task[]
}

model Task {
    id            String    @id @default(cuid())
    name          String
    user          User      @relation(fields: [userId], references: [id])
    userId        String
    list          List      @relation(fields: [listId], references: [id])
    listId        String
    parentTask    Task?     @relation("ParentTask", fields: [parentTaskId], references: [id])
    parentTaskId  String?
    ChildrenTasks Task[]    @relation("ParentTask")
    title         String
    description   String?
    notes         String?
    completed     Boolean   @default(false)
    starred       Boolean   @default(false)
    date          DateTime?
    reminder      DateTime?
    repeats       Json?
    position      Int
    created_at    DateTime  @default(now())
    updated_at    DateTime  @default(now()) @updatedAt

    TagsOnTasks TagsOnTasks[]
}

model Tag {
    id         String   @id @default(cuid())
    name       String
    color      String?
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    TagsOnTasks TagsOnTasks[]
}

model TagsOnTasks {
    task   Task   @relation(fields: [taskId], references: [id])
    taskId String
    tag    Tag    @relation(fields: [tagId], references: [id])
    tagId  String

    @@id([taskId, tagId])
}
